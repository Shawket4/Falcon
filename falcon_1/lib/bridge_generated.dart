// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Apex {
  Future<List<Trip>> returnTrips({required String json, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturnTripsConstMeta;
}

class DropOffPoint {
  final bool status;
  final int capacity;
  final String gasType;
  final String timeStamp;
  final String locationName;

  const DropOffPoint({
    required this.status,
    required this.capacity,
    required this.gasType,
    required this.timeStamp,
    required this.locationName,
  });
}

class StepCompleteTime {
  final Terminal terminal;
  final List<DropOffPoint>? dropOffPoints;

  const StepCompleteTime({
    required this.terminal,
    this.dropOffPoints,
  });
}

class StepCompleteTimeDB {
  final Terminal terminal;
  final List<DropOffPoint> dropOffPoints;

  const StepCompleteTimeDB({
    required this.terminal,
    required this.dropOffPoints,
  });
}

class Terminal {
  final String timeStamp;
  final String terminalName;
  final bool status;

  const Terminal({
    required this.timeStamp,
    required this.terminalName,
    required this.status,
  });
}

class Trip {
  final int id;
  final String createdAt;
  final String updatedAt;
  final String? deletedAt;
  final int carId;
  final int driverId;
  final String carNoPlate;
  final String driverName;
  final String transporter;
  final int tankCapacity;
  final String pickUpPoint;
  final int progressIndex;
  final StepCompleteTime stepCompleteTime;
  final StepCompleteTimeDB stepCompleteTimeDb;
  final int noOfDropOffPoints;
  final String date;
  final double feeRate;
  final double mileage;
  final String startTime;
  final String endTime;
  final bool isClosed;

  const Trip({
    required this.id,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
    required this.carId,
    required this.driverId,
    required this.carNoPlate,
    required this.driverName,
    required this.transporter,
    required this.tankCapacity,
    required this.pickUpPoint,
    required this.progressIndex,
    required this.stepCompleteTime,
    required this.stepCompleteTimeDb,
    required this.noOfDropOffPoints,
    required this.date,
    required this.feeRate,
    required this.mileage,
    required this.startTime,
    required this.endTime,
    required this.isClosed,
  });
}

class ApexImpl implements Apex {
  final ApexPlatform _platform;
  factory ApexImpl(ExternalLibrary dylib) => ApexImpl.raw(ApexPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ApexImpl.wasm(FutureOr<WasmModule> module) =>
      ApexImpl(module as ExternalLibrary);
  ApexImpl.raw(this._platform);
  Future<List<Trip>> returnTrips({required String json, dynamic hint}) {
    var arg0 = _platform.api2wire_String(json);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_trips(port_, arg0),
      parseSuccessData: _wire2api_list_trip,
      constMeta: kReturnTripsConstMeta,
      argValues: [json],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnTripsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "return_trips",
        argNames: ["json"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DropOffPoint _wire2api_drop_off_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DropOffPoint(
      status: _wire2api_bool(arr[0]),
      capacity: _wire2api_u32(arr[1]),
      gasType: _wire2api_String(arr[2]),
      timeStamp: _wire2api_String(arr[3]),
      locationName: _wire2api_String(arr[4]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  List<DropOffPoint> _wire2api_list_drop_off_point(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_drop_off_point).toList();
  }

  List<Trip> _wire2api_list_trip(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_trip).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  List<DropOffPoint>? _wire2api_opt_list_drop_off_point(dynamic raw) {
    return raw == null ? null : _wire2api_list_drop_off_point(raw);
  }

  StepCompleteTime _wire2api_step_complete_time(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StepCompleteTime(
      terminal: _wire2api_terminal(arr[0]),
      dropOffPoints: _wire2api_opt_list_drop_off_point(arr[1]),
    );
  }

  StepCompleteTimeDB _wire2api_step_complete_time_db(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StepCompleteTimeDB(
      terminal: _wire2api_terminal(arr[0]),
      dropOffPoints: _wire2api_list_drop_off_point(arr[1]),
    );
  }

  Terminal _wire2api_terminal(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Terminal(
      timeStamp: _wire2api_String(arr[0]),
      terminalName: _wire2api_String(arr[1]),
      status: _wire2api_bool(arr[2]),
    );
  }

  Trip _wire2api_trip(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 21)
      throw Exception('unexpected arr length: expect 21 but see ${arr.length}');
    return Trip(
      id: _wire2api_u32(arr[0]),
      createdAt: _wire2api_String(arr[1]),
      updatedAt: _wire2api_String(arr[2]),
      deletedAt: _wire2api_opt_String(arr[3]),
      carId: _wire2api_u32(arr[4]),
      driverId: _wire2api_u32(arr[5]),
      carNoPlate: _wire2api_String(arr[6]),
      driverName: _wire2api_String(arr[7]),
      transporter: _wire2api_String(arr[8]),
      tankCapacity: _wire2api_u32(arr[9]),
      pickUpPoint: _wire2api_String(arr[10]),
      progressIndex: _wire2api_u32(arr[11]),
      stepCompleteTime: _wire2api_step_complete_time(arr[12]),
      stepCompleteTimeDb: _wire2api_step_complete_time_db(arr[13]),
      noOfDropOffPoints: _wire2api_u32(arr[14]),
      date: _wire2api_String(arr[15]),
      feeRate: _wire2api_f64(arr[16]),
      mileage: _wire2api_f64(arr[17]),
      startTime: _wire2api_String(arr[18]),
      endTime: _wire2api_String(arr[19]),
      isClosed: _wire2api_bool(arr[20]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class ApexPlatform extends FlutterRustBridgeBase<ApexWire> {
  ApexPlatform(ffi.DynamicLibrary dylib) : super(ApexWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class ApexWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApexWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApexWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_return_trips(
    int port_,
    ffi.Pointer<wire_uint_8_list> json,
  ) {
    return _wire_return_trips(
      port_,
      json,
    );
  }

  late final _wire_return_tripsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_return_trips');
  late final _wire_return_trips = _wire_return_tripsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
